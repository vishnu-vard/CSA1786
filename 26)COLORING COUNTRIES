def solve_map_coloring(regions, colors):
    def is_valid(region, color):
        for neighbor in regions[region]:
            if neighbor in assigned_colors and assigned_colors[neighbor] == color:
                return False
        return True

    def backtrack(regions):
        if not regions:
            return True

        region = regions.pop()
        for color in colors:
            if is_valid(region, color):
                assigned_colors[region] = color
                if backtrack(regions):
                    return True
                assigned_colors.pop(region)

        regions.append(region)
        return False

    assigned_colors = {}
    regions = list(regions.keys())
    if backtrack(regions):
        return assigned_colors
    return {}

# Example usage
regions = {
    'A': ['B', 'C'],
    'B': ['A', 'C', 'D'],
    'C': ['A', 'B', 'D', 'E'],
    'D': ['B', 'C', 'E'],
    'E': ['C', 'D'],
}
colors = ['Red', 'Green', 'Blue']

print(solve_map_coloring(regions, colors))
